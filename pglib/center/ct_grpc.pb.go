// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: ct.proto

package center

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CenterRadar_SendMe_FullMethodName = "/center.CenterRadar/SendMe"
)

// CenterRadarClient is the client API for CenterRadar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CenterRadarClient interface {
	SendMe(ctx context.Context, in *NodeReaction, opts ...grpc.CallOption) (*CenterReaction, error)
}

type centerRadarClient struct {
	cc grpc.ClientConnInterface
}

func NewCenterRadarClient(cc grpc.ClientConnInterface) CenterRadarClient {
	return &centerRadarClient{cc}
}

func (c *centerRadarClient) SendMe(ctx context.Context, in *NodeReaction, opts ...grpc.CallOption) (*CenterReaction, error) {
	out := new(CenterReaction)
	err := c.cc.Invoke(ctx, CenterRadar_SendMe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CenterRadarServer is the server API for CenterRadar service.
// All implementations must embed UnimplementedCenterRadarServer
// for forward compatibility
type CenterRadarServer interface {
	SendMe(context.Context, *NodeReaction) (*CenterReaction, error)
	mustEmbedUnimplementedCenterRadarServer()
}

// UnimplementedCenterRadarServer must be embedded to have forward compatible implementations.
type UnimplementedCenterRadarServer struct {
}

func (UnimplementedCenterRadarServer) SendMe(context.Context, *NodeReaction) (*CenterReaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMe not implemented")
}
func (UnimplementedCenterRadarServer) mustEmbedUnimplementedCenterRadarServer() {}

// UnsafeCenterRadarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CenterRadarServer will
// result in compilation errors.
type UnsafeCenterRadarServer interface {
	mustEmbedUnimplementedCenterRadarServer()
}

func RegisterCenterRadarServer(s grpc.ServiceRegistrar, srv CenterRadarServer) {
	s.RegisterService(&CenterRadar_ServiceDesc, srv)
}

func _CenterRadar_SendMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeReaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterRadarServer).SendMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CenterRadar_SendMe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterRadarServer).SendMe(ctx, req.(*NodeReaction))
	}
	return interceptor(ctx, in, info, handler)
}

// CenterRadar_ServiceDesc is the grpc.ServiceDesc for CenterRadar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CenterRadar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "center.CenterRadar",
	HandlerType: (*CenterRadarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMe",
			Handler:    _CenterRadar_SendMe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ct.proto",
}
