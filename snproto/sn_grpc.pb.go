// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: sn.proto

package snproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MonitorService_GetInfoPacket_FullMethodName = "/snproto.MonitorService/GetInfoPacket"
)

// MonitorServiceClient is the client API for MonitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitorServiceClient interface {
	GetInfoPacket(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MonitorPacket, error)
}

type monitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitorServiceClient(cc grpc.ClientConnInterface) MonitorServiceClient {
	return &monitorServiceClient{cc}
}

func (c *monitorServiceClient) GetInfoPacket(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MonitorPacket, error) {
	out := new(MonitorPacket)
	err := c.cc.Invoke(ctx, MonitorService_GetInfoPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitorServiceServer is the server API for MonitorService service.
// All implementations must embed UnimplementedMonitorServiceServer
// for forward compatibility
type MonitorServiceServer interface {
	GetInfoPacket(context.Context, *Empty) (*MonitorPacket, error)
	mustEmbedUnimplementedMonitorServiceServer()
}

// UnimplementedMonitorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMonitorServiceServer struct {
}

func (UnimplementedMonitorServiceServer) GetInfoPacket(context.Context, *Empty) (*MonitorPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoPacket not implemented")
}
func (UnimplementedMonitorServiceServer) mustEmbedUnimplementedMonitorServiceServer() {}

// UnsafeMonitorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitorServiceServer will
// result in compilation errors.
type UnsafeMonitorServiceServer interface {
	mustEmbedUnimplementedMonitorServiceServer()
}

func RegisterMonitorServiceServer(s grpc.ServiceRegistrar, srv MonitorServiceServer) {
	s.RegisterService(&MonitorService_ServiceDesc, srv)
}

func _MonitorService_GetInfoPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServiceServer).GetInfoPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MonitorService_GetInfoPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServiceServer).GetInfoPacket(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MonitorService_ServiceDesc is the grpc.ServiceDesc for MonitorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snproto.MonitorService",
	HandlerType: (*MonitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfoPacket",
			Handler:    _MonitorService_GetInfoPacket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sn.proto",
}

const (
	NodeService_GetNodeInfo_FullMethodName = "/snproto.NodeService/GetNodeInfo"
	NodeService_Shutdown_FullMethodName    = "/snproto.NodeService/Shutdown"
	NodeService_Reboot_FullMethodName      = "/snproto.NodeService/Reboot"
)

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceClient interface {
	GetNodeInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeSys, error)
	// 关闭，理论上来说，关闭之后就再也打不开了，
	Shutdown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// reboot的作用应该是重启服务器j
	Reboot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) GetNodeInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeSys, error) {
	out := new(NodeSys)
	err := c.cc.Invoke(ctx, NodeService_GetNodeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Shutdown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NodeService_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Reboot(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NodeService_Reboot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility
type NodeServiceServer interface {
	GetNodeInfo(context.Context, *Empty) (*NodeSys, error)
	// 关闭，理论上来说，关闭之后就再也打不开了，
	Shutdown(context.Context, *Empty) (*Empty, error)
	// reboot的作用应该是重启服务器j
	Reboot(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (UnimplementedNodeServiceServer) GetNodeInfo(context.Context, *Empty) (*NodeSys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (UnimplementedNodeServiceServer) Shutdown(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedNodeServiceServer) Reboot(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reboot not implemented")
}
func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_GetNodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).GetNodeInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Shutdown(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Reboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Reboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_Reboot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Reboot(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snproto.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeInfo",
			Handler:    _NodeService_GetNodeInfo_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _NodeService_Shutdown_Handler,
		},
		{
			MethodName: "Reboot",
			Handler:    _NodeService_Reboot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sn.proto",
}

const (
	NodeAppService_LoadAppList_FullMethodName  = "/snproto.NodeAppService/LoadAppList"
	NodeAppService_UninstallApp_FullMethodName = "/snproto.NodeAppService/UninstallApp"
	NodeAppService_InstallApp_FullMethodName   = "/snproto.NodeAppService/InstallApp"
	NodeAppService_Stop_FullMethodName         = "/snproto.NodeAppService/Stop"
	NodeAppService_Restart_FullMethodName      = "/snproto.NodeAppService/Restart"
)

// NodeAppServiceClient is the client API for NodeAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeAppServiceClient interface {
	LoadAppList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeAppArray, error)
	UninstallApp(ctx context.Context, in *NodeAppInfo, opts ...grpc.CallOption) (*Result, error)
	InstallApp(ctx context.Context, in *PiCloudApp, opts ...grpc.CallOption) (*Result, error)
	Stop(ctx context.Context, in *NodeAppInfo, opts ...grpc.CallOption) (*Result, error)
	Restart(ctx context.Context, in *NodeAppInfo, opts ...grpc.CallOption) (*Result, error)
}

type nodeAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeAppServiceClient(cc grpc.ClientConnInterface) NodeAppServiceClient {
	return &nodeAppServiceClient{cc}
}

func (c *nodeAppServiceClient) LoadAppList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeAppArray, error) {
	out := new(NodeAppArray)
	err := c.cc.Invoke(ctx, NodeAppService_LoadAppList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAppServiceClient) UninstallApp(ctx context.Context, in *NodeAppInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, NodeAppService_UninstallApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAppServiceClient) InstallApp(ctx context.Context, in *PiCloudApp, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, NodeAppService_InstallApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAppServiceClient) Stop(ctx context.Context, in *NodeAppInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, NodeAppService_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAppServiceClient) Restart(ctx context.Context, in *NodeAppInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, NodeAppService_Restart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeAppServiceServer is the server API for NodeAppService service.
// All implementations must embed UnimplementedNodeAppServiceServer
// for forward compatibility
type NodeAppServiceServer interface {
	LoadAppList(context.Context, *Empty) (*NodeAppArray, error)
	UninstallApp(context.Context, *NodeAppInfo) (*Result, error)
	InstallApp(context.Context, *PiCloudApp) (*Result, error)
	Stop(context.Context, *NodeAppInfo) (*Result, error)
	Restart(context.Context, *NodeAppInfo) (*Result, error)
	mustEmbedUnimplementedNodeAppServiceServer()
}

// UnimplementedNodeAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeAppServiceServer struct {
}

func (UnimplementedNodeAppServiceServer) LoadAppList(context.Context, *Empty) (*NodeAppArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadAppList not implemented")
}
func (UnimplementedNodeAppServiceServer) UninstallApp(context.Context, *NodeAppInfo) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UninstallApp not implemented")
}
func (UnimplementedNodeAppServiceServer) InstallApp(context.Context, *PiCloudApp) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallApp not implemented")
}
func (UnimplementedNodeAppServiceServer) Stop(context.Context, *NodeAppInfo) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedNodeAppServiceServer) Restart(context.Context, *NodeAppInfo) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedNodeAppServiceServer) mustEmbedUnimplementedNodeAppServiceServer() {}

// UnsafeNodeAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeAppServiceServer will
// result in compilation errors.
type UnsafeNodeAppServiceServer interface {
	mustEmbedUnimplementedNodeAppServiceServer()
}

func RegisterNodeAppServiceServer(s grpc.ServiceRegistrar, srv NodeAppServiceServer) {
	s.RegisterService(&NodeAppService_ServiceDesc, srv)
}

func _NodeAppService_LoadAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAppServiceServer).LoadAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAppService_LoadAppList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAppServiceServer).LoadAppList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAppService_UninstallApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeAppInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAppServiceServer).UninstallApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAppService_UninstallApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAppServiceServer).UninstallApp(ctx, req.(*NodeAppInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAppService_InstallApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PiCloudApp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAppServiceServer).InstallApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAppService_InstallApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAppServiceServer).InstallApp(ctx, req.(*PiCloudApp))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAppService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeAppInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAppServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAppService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAppServiceServer).Stop(ctx, req.(*NodeAppInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAppService_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeAppInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAppServiceServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeAppService_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAppServiceServer).Restart(ctx, req.(*NodeAppInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeAppService_ServiceDesc is the grpc.ServiceDesc for NodeAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snproto.NodeAppService",
	HandlerType: (*NodeAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadAppList",
			Handler:    _NodeAppService_LoadAppList_Handler,
		},
		{
			MethodName: "UninstallApp",
			Handler:    _NodeAppService_UninstallApp_Handler,
		},
		{
			MethodName: "InstallApp",
			Handler:    _NodeAppService_InstallApp_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _NodeAppService_Stop_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _NodeAppService_Restart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sn.proto",
}
